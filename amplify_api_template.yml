AWSTemplateFormatVersion: 2010-09-09
Parameters:
  CognitoUserPoolArn:
    Type: String

Resources:
  AppTable:
    Type: AWS::DynamoDB::Table
    Properties:
      TableName: Rides
      AttributeDefinitions:
        -
          AttributeName: "RideId"
          AttributeType: "S"
      KeySchema:
        -
          AttributeName: "RideId"
          KeyType: "HASH"
      ProvisionedThroughput:
        ReadCapacityUnits: 5
        WriteCapacityUnits: 5

  AppLambdaExecutionRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - lambda.amazonaws.com
            Action:
              - sts:AssumeRole
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole
      Policies:
        - PolicyName: DynamoDBWriteAccess
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Effect: Allow
                Action: 'dynamodb:PutItem'
                Resource: !GetAtt AppTable.Arn

  AppLambda:
    Type: AWS::Lambda::Function
    Properties:
      Runtime: nodejs12.x
      Role: !GetAtt AppLambdaExecutionRole.Arn
      Handler: index.handler
      Code:
        ZipFile: |
            // Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.
            // SPDX-License-Identifier: MIT-0

            const randomBytes = require('crypto').randomBytes;

            const AWS = require('aws-sdk');

            const ddb = new AWS.DynamoDB.DocumentClient();

            const fleet = [
                {
                    Name: 'TX5400',
                    Color: 'Dark Blue',
                    Year: '2020',
                },
                {
                    Name: 'BXC500',
                    Color: 'Light Blue',
                    Year: '2021',
                },
                {
                    Name: 'XSA003',
                    Color: 'Regular Blue',
                    Year: '2021',
                },
            ];

            exports.handler = (event, context, callback) => {
                if (!event.requestContext.authorizer) {
                  errorResponse('Authorization not configured', context.awsRequestId, callback);
                  return;
                }

                const rideId = toUrlString(randomBytes(16));
                console.log('Received event (', rideId, '): ', event);
                const username = event.requestContext.authorizer.claims['cognito:username'];
                const requestBody = JSON.parse(event.body);

                const pickupLocation = requestBody.PickupLocation;

                const carunit = findCarunit(pickupLocation);

                recordRide(rideId, username, carunit).then(() => {
                    callback(null, {
                        statusCode: 201,
                        body: JSON.stringify({
                            RideId: rideId,
                            Carunit: carunit,
                            CarunitName: carunit.Name,
                            Eta: '30 seconds',
                            Rider: username,
                        }),
                        headers: {
                            'Access-Control-Allow-Origin': '*',
                        },
                    });
                }).catch((err) => {
                    console.error(err);
                    errorResponse(err.message, context.awsRequestId, callback)
                });
            };

            function findCarunit(pickupLocation) {
                console.log('Finding carunit for ', pickupLocation.Latitude, ', ', pickupLocation.Longitude);
                return fleet[Math.floor(Math.random() * fleet.length)];
            }

            function recordRide(rideId, username, carunit) {
                return ddb.put({
                    TableName: 'Rides',
                    Item: {
                        RideId: rideId,
                        User: username,
                        Carunit: carunit,
                        CarunitName: carunit.Name,
                        RequestTime: new Date().toISOString(),
                    },
                }).promise();
            }

            function toUrlString(buffer) {
                return buffer.toString('base64')
                    .replace(/\+/g, '-')
                    .replace(/\//g, '_')
                    .replace(/=/g, '');
            }

            function errorResponse(errorMessage, awsRequestId, callback) {
              callback(null, {
                statusCode: 500,
                body: JSON.stringify({
                  Error: errorMessage,
                  Reference: awsRequestId,
                }),
                headers: {
                  'Access-Control-Allow-Origin': '*',
                },
              });
            }
      Description: Invoke a function during stack creation.

  ApplambdaApiGatewayInvoke:
    Type: AWS::Lambda::Permission
    Properties:
      Action: lambda:InvokeFunction
      FunctionName: !GetAtt AppLambda.Arn
      Principal: apigateway.amazonaws.com
      SourceArn: !Sub arn:aws:execute-api:${AWS::Region}:${AWS::AccountId}:${AppRestApi}/*/POST/ride

  AppRestApi:
    Type: AWS::ApiGateway::RestApi
    Properties:
      EndpointConfiguration:
        Types:
          - REGIONAL
      Name: "BlueCarHealth"

  AppRestApiAuthorizer:
    Type: 'AWS::ApiGateway::Authorizer'
    Properties:
      Type: COGNITO_USER_POOLS
      ProviderARNs: [ !Ref CognitoUserPoolArn ]
      IdentitySource: method.request.header.Authorization
      Name: "BlueCarHealth"
      RestApiId: !Ref AppRestApi

  AppRestApiRideResource:
    Type: 'AWS::ApiGateway::Resource'
    Properties:
      RestApiId: !Ref AppRestApi
      ParentId: !GetAtt
        - AppRestApi
        - RootResourceId
      PathPart: ride

  AppRestApiRidePostMethod:
    Type: 'AWS::ApiGateway::Method'
    Properties:
      RestApiId: !Ref AppRestApi
      ResourceId: !Ref AppRestApiRideResource
      HttpMethod: POST
      AuthorizationType: COGNITO_USER_POOLS
      AuthorizerId: !Ref AppRestApiAuthorizer
      Integration:
        Type: AWS_PROXY
        IntegrationHttpMethod: POST
        Uri: !Sub >-
          arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${AppLambda.Arn}/invocations
        IntegrationResponses:
          - ResponseParameters:
              method.response.header.Access-Control-Allow-Headers: "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token,X-Amz-User-Agent'"
              method.response.header.Access-Control-Allow-Origin: "'*'"
              method.response.header.Access-Control-Allow-Methods: "'OPTIONS,GET,PUT,POST,DELETE,PATCH,HEAD'"
            StatusCode: '204'
        RequestTemplates:
          application/json: '{ statusCode: 200 }'
      MethodResponses:
        - ResponseParameters:
            method.response.header.Access-Control-Allow-Headers: true
            method.response.header.Access-Control-Allow-Origin: true
            method.response.header.Access-Control-Allow-Methods: true
          StatusCode: '204'
          ResponseModels:
            application/json: Empty

  #Added OPTIONS method that can respond to the OPTIONS preflight request
  AppRestApiOPTIONSMethod:
    Type: 'AWS::ApiGateway::Method'
    Properties:
      RestApiId: !Ref AppRestApi
      ResourceId: !Ref AppRestApiRideResource
      HttpMethod: OPTIONS #added
      AuthorizationType: NONE
      Integration:
        IntegrationResponses:
          - ResponseParameters:
              method.response.header.Access-Control-Allow-Headers: "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token,X-Amz-User-Agent'"
              method.response.header.Access-Control-Allow-Origin: "'*'"
              method.response.header.Access-Control-Allow-Methods: "'OPTIONS,GET,PUT,POST,DELETE,PATCH,HEAD'"
            StatusCode: '204'
        RequestTemplates:
          application/json: '{ statusCode: 200 }'
        Type: MOCK
      MethodResponses:
        - ResponseParameters:
            method.response.header.Access-Control-Allow-Headers: true
            method.response.header.Access-Control-Allow-Origin: true
            method.response.header.Access-Control-Allow-Methods: true
          StatusCode: '204'

  AppRestApiDeployment:
    Type: AWS::ApiGateway::Deployment
    DependsOn:
      - AppRestApiRidePostMethod
      - AppRestApiOPTIONSMethod
    Properties:
      RestApiId: !Ref AppRestApi
      StageName: prod

Outputs:
  ApiEndpoint:
    Value: !Sub 'https://${AppRestApi}.execute-api.${AWS::Region}.amazonaws.com/prod'
